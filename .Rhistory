mageck$num == "4"
)
mageck <- filter(
mageck,
mageck$num == "4"
)
summary(mageck)
# Import MAGeCK data set
library(readr)
library(ggplot2)
library(dplyr)
mageck <- read_delim("mageckRRA.gene_summary.txt",
delim = "\t", escape_double = FALSE,
trim_ws = TRUE)
# Reassign column names
colnames(mageck) <- c("id",
"num",
"neg.score",
"neg.p_value",
"neg.fdr",
"neg.rank",
"neg.goodsgrna",
"neg.lfc",
"pos.score",
"pos.p_value",
"pos.fdr",
"pos.rank",
"pos.goodsgrna",
"lfc"
)
# Change `id` column to all lowercase characters
mageck$id <- tolower(mageck$id)
# Convert goodsgrna to factor
mageck$neg.goodsgrna <- as.factor(mageck$neg.goodsgrna)
mageck$pos.goodsgrna <- as.factor(mageck$pos.goodsgrna)
# Delete neg.lfc
mageck <- mageck[,-8]
# view data summary
summary(mageck)
# Remove observations where `num` for sgRNA != 4
mageck <- filter(
mageck,
mageck$num == "4"
)
# view data summary
summary(mageck)
mageck <- read_delim("mageckRRA.gene_summary.txt",
delim = "\t", escape_double = FALSE,
trim_ws = TRUE)
# Reassign column names
colnames(mageck) <- c("id",
"num",
"neg.score",
"neg.p_value",
"neg.fdr",
"neg.rank",
"neg.goodsgrna",
"neg.lfc",
"pos.score",
"pos.p_value",
"pos.fdr",
"pos.rank",
"pos.goodsgrna",
"lfc"
)
# Change `id` column to all lowercase characters
mageck$id <- tolower(mageck$id)
# Convert goodsgrna to factor
mageck$neg.goodsgrna <- as.factor(mageck$neg.goodsgrna)
mageck$pos.goodsgrna <- as.factor(mageck$pos.goodsgrna)
# Delete neg.lfc
mageck <- mageck[,"neg.lfc"]
head(mageck)
# Delete neg.lfc
mageck <- mageck[,-"neg.lfc"]
mageck <- read_delim("mageckRRA.gene_summary.txt",
delim = "\t", escape_double = FALSE,
trim_ws = TRUE)
# Reassign column names
colnames(mageck) <- c("id",
"num",
"neg.score",
"neg.p_value",
"neg.fdr",
"neg.rank",
"neg.goodsgrna",
"neg.lfc",
"pos.score",
"pos.p_value",
"pos.fdr",
"pos.rank",
"pos.goodsgrna",
"lfc"
)
# Change `id` column to all lowercase characters
mageck$id <- tolower(mageck$id)
# Convert goodsgrna to factor
mageck$neg.goodsgrna <- as.factor(mageck$neg.goodsgrna)
mageck$pos.goodsgrna <- as.factor(mageck$pos.goodsgrna)
# Delete neg.lfc
mageck <- mageck[,-c("neg.lfc")]
# Delete neg.lfc
mageck <- -mageck[,"neg.lfc"]
head(mageck)
mageck <- read_delim("mageckRRA.gene_summary.txt",
delim = "\t", escape_double = FALSE,
trim_ws = TRUE)
# Reassign column names
colnames(mageck) <- c("id",
"num",
"neg.score",
"neg.p_value",
"neg.fdr",
"neg.rank",
"neg.goodsgrna",
"neg.lfc",
"pos.score",
"pos.p_value",
"pos.fdr",
"pos.rank",
"pos.goodsgrna",
"lfc"
)
# Change `id` column to all lowercase characters
mageck$id <- tolower(mageck$id)
# Convert goodsgrna to factor
mageck$neg.goodsgrna <- as.factor(mageck$neg.goodsgrna)
mageck$pos.goodsgrna <- as.factor(mageck$pos.goodsgrna)
# Delete neg.lfc
mageck <- mageck[, select = -c("neg.lfc")]
head(mageck)
# Delete neg.lfc
mageck <- mageck[, select = -c("neg.lfc")]
View(mageck)
# Delete neg.lfc
mageck <- mageck[, select = -c(neg.lfc)]
mageck <- mageck %>%
filter(mageck$num == "4") %>%
-select(c("neg.lfc", "num"))
mageck <- mageck %>%
filter(mageck$num == "4") %>%
-select(c(neg.lfc, num))
head(mageck)
# Remove observations where `num` for sgRNA != 4
mageck <- mageck %>%
filter(mageck$num == "4") %>%
-select(c(mageck$neg.lfc, mageck$num))
# Remove observations where `num` for sgRNA != 4
mageck <- mageck %>%
filter(mageck$num == "4") %>%
select(-c(neg.lfc, num))
head(mageck)
# view data summary
summary(mageck)
19500*.06
# Remove observations where `num` for sgRNA != 4
## then drop unnecessary `num` and `neg.lfc` columns
mageck <- mageck %>%
filter(mageck$num == "4") %>%
select(-c(neg.lfc, num)) %>%
tolower(id)
# Remove observations where `num` for sgRNA != 4
## then drop unnecessary `num` and `neg.lfc` columns
mageck <- mageck %>%
filter(mageck$num == "4") %>%
select(-c(neg.lfc, num)) %>%
mutate(across(id), tolower)
mageck <- read_delim("mageckRRA.gene_summary.txt",
delim = "\t", escape_double = FALSE,
trim_ws = TRUE)
# Reassign column names
colnames(mageck) <- c("id",
"num",
"neg.score",
"neg.p_value",
"neg.fdr",
"neg.rank",
"neg.goodsgrna",
"neg.lfc",
"pos.score",
"pos.p_value",
"pos.fdr",
"pos.rank",
"pos.goodsgrna",
"lfc"
)
# Convert goodsgrna to factor
mageck$neg.goodsgrna <- as.factor(mageck$neg.goodsgrna)
mageck$pos.goodsgrna <- as.factor(mageck$pos.goodsgrna)
# Remove observations where `num` for sgRNA != 4
# then drop unnecessary `num` and `neg.lfc` columns.
# Change `id` column to all lowercase characters.
mageck <- mageck %>%
filter(mageck$num == "4") %>%
select(-c(neg.lfc, num)) %>%
mutate(across(id), tolower)
# Remove observations where `num` for sgRNA != 4
# then drop unnecessary `num` and `neg.lfc` columns.
# Change `id` column to all lowercase characters.
mageck <- mageck %>%
filter(mageck$num == "4") %>%
select(-c(neg.lfc, num)) %>%
mutate(across(id, tolower))
# view data summary
summary(mageck)
head(mageck)
# Remove observations where `num` for sgRNA != 4
# then drop unnecessary `num` and `neg.lfc` columns.
# Change `id` column to all lowercase characters.
mageck <- mageck %>%
filter(mageck$num == "4") %>%
select(-c(neg.lfc, num)) %>%
mutate(across(id, tolower)) %>%
mutate(across(c(neg.goodsgrna,
pos.goodsgrna),
as.factor))
mageck <- read_delim("mageckRRA.gene_summary.txt",
delim = "\t", escape_double = FALSE,
trim_ws = TRUE)
# Reassign column names
colnames(mageck) <- c("id",
"num",
"neg.score",
"neg.p_value",
"neg.fdr",
"neg.rank",
"neg.goodsgrna",
"neg.lfc",
"pos.score",
"pos.p_value",
"pos.fdr",
"pos.rank",
"pos.goodsgrna",
"lfc"
)
# Remove observations where `num` for sgRNA != 4
# then drop unnecessary `num` and `neg.lfc` columns.
# Change `id` column to all lowercase characters.
mageck <- mageck %>%
filter(mageck$num == "4") %>%
select(-c(neg.lfc, num)) %>%
mutate(across(id, tolower)) %>%
mutate(across(c(neg.goodsgrna,
pos.goodsgrna),
as.factor))
# view data summary
summary(mageck)
data <- read_delim("mageckRRA.gene_summary.txt",
delim = "\t", escape_double = FALSE,
trim_ws = TRUE)
# Reassign column names
colnames(data) <- c("id",
"num",
"neg.score",
"neg.p_value",
"neg.fdr",
"neg.rank",
"neg.goodsgrna",
"neg.lfc",
"pos.score",
"pos.p_value",
"pos.fdr",
"pos.rank",
"pos.goodsgrna",
"lfc"
)
# Filter and clean data
mageck <- data %>%
# Remove observations where `num` for sgRNA != 4
filter(num == "4") %>%
# Drop unnecessary `num` and `neg.lfc` columns.
select(-c(neg.lfc, num)) %>%
# Change `id` column to all lowercase characters.
mutate(across(id, tolower)) %>%
# Convert to type factor
mutate(across(c(neg.goodsgrna,
pos.goodsgrna),
as.factor))
# view data summary
summary(mageck)
str(pathways)
?write.table
SampleES
colnames(SampleES)
?BiocManager
??BiocManager
paste(score_df$leadingEdge[2], collapse = ",")
score_df <- fgsea::fgseaSimple(
pathways = pathways,
stats = mageck_lfc_sort,
nperm = 1000,
minSize = 5,
scoreType = "std",
gseaParam = 1
)
paste(score_df$leadingEdge[2], collapse = ",")
score_df$leadingEdge %>%
lapply(as.data.frame) %>%
bind_rows(.id = "ID") %>%
mutate(ID = as.numeric(ID) ) %>%
write.table(file = "leading_edge.txt",
sep = " ",
row.names = pathways)
library(dplyr)
score_df$leadingEdge %>%
lapply(as.data.frame) %>%
bind_rows(.id = "ID") %>%
mutate(ID = as.numeric(ID) ) %>%
write.table(file = "leading_edge.txt",
sep = " ",
row.names = pathways)
# Create leading edge list object
leading_edge <- score_df$leadingEdge
class(leading_edge)
names(leading_edge) <- score_df$pathway
head(leading_edge)
leading_edge %>%
lapply(as.data.frame) %>%
bind_rows(.id = "ID") %>%
mutate(ID = as.numeric(ID) ) %>%
write.table(file = "leading_edge.txt",
sep = " ",
row.names = names(leading_edge))
leading_edge %>%
lapply(as.data.frame) %>%
bind_rows(.id = "ID") %>%
mutate(ID = as.character(ID) ) %>%
write.table(file = "leading_edge.txt",
sep = " ",
row.names = names(leading_edge))
leading_edge %>%
lapply(as.data.frame) %>%
bind_rows(.id = "ID") %>%
mutate(ID = as.character(ID) ) %>%
write.table(file = "leading_edge.txt",
sep = " ")
for(i in 1:length(leading_edge)){
write.table(
data.frame(leading_edge[[i]]),
file='leading_edge.txt',
append = TRUE,
row.names = FALSE)
cat('\n',
file = 'leading_edge.txt',
append = TRUE)
}
??capture.output
utils::capture.output(leading_edge,
file = "leading_edge.csv")
# Store GSEA output as .RData file
save(score_df,
file = "CRISPR_screen/gsea_output.RData"
)
# Store GSEA output as .RData file
save(score_df,
file = "gsea_output.RData"
)
load("C:/Users/harps/Documents/MATH 401/Capstone Analysis/CRISPR_screen/gsea_output.RData")
load("~/MATH 401/Capstone Analysis/CRISPR_screen/gsea_output.RData")
# Import MAGeCK data set
library(readr)
library(ggplot2)
library(dplyr)
data <- read_delim("mageckRRA.gene_summary.txt",
delim = "\t", escape_double = FALSE,
trim_ws = TRUE)
# Reassign column names
colnames(data) <- c("id",
"num",
"neg.score",
"neg.p_value",
"neg.fdr",
"neg.rank",
"neg.goodsgrna",
"neg.lfc",
"pos.score",
"pos.p_value",
"pos.fdr",
"pos.rank",
"pos.goodsgrna",
"lfc"
)
# Filter and clean data
mageck <- data %>%
# Remove observations where `num` for sgRNA != 4
filter(num == "4") %>%
# Drop unnecessary `num` and `neg.lfc` columns.
select(-c(neg.lfc, num)) %>%
# Change `id` column to all lowercase characters.
mutate(across(id, tolower)) %>%
# Convert to type factor
mutate(across(c(neg.goodsgrna,
pos.goodsgrna),
as.factor
)
)
# Sort genes by `lfc` and create named vector of `lfc` values
lfc_sort <- mageck[order(mageck$lfc, decreasing = TRUE),]
mageck_lfc_sort <- as.vector(lfc_sort$lfc)
names(mageck_lfc_sort) <- lfc_sort$id
head(mageck_lfc_sort)
# Run GSEA on pre-ranked gene expression data
score_df <- fgsea::fgseaSimple(
pathways = pathways,
stats = mageck_lfc_sort,
nperm = 1000,
minSize = 5,
scoreType = "std",
gseaParam = 1
)
# Write GSEA results to tab-delimited file, excluding leading edge variable
write.table(
x = score_df[,1:7],
file = "gsea_output.txt",
sep = "\t",
row.names = FALSE
)
# Write GSEA results to tab-delimited file, excluding leading edge variable
write.table(
x = score_df[,1:7],
file = "gsea_output.txt",
sep = "\t",
row.names = FALSE
)
leading_edge <- score_df$leadingEdge
names(leading_edge) <- score_df$pathway
utils::capture.output(leading_edge,
file = "leading_edge.csv")
utils::capture.output(leading_edge,
file = "leading_edge.txt")
# Store GSEA output as .RData file
save(score_df,
file = "gsea_output.RData"
)
knitr::opts_chunk$set(echo = TRUE)
load(file = "gsea_output.RData")
hist(score_df$ES)
hist(score_df$ES, bins = 50)
hist(score_df$ES, breaks = 50)
# Normalized Enrichment score distribution
hist(score_df$NES, breaks = 50)
# Nominal P Value distribution
hist(score_df$pval, breaks = 50)
# FDR q value distribution
hist(score_df$padj, breaks = 50)
# Number of more extreme gene sets distribution
hist(score_df$nMoreExtreme, breaks = 50)
# Size of gene set distribution
hist(score_df$size, breaks = 50)
str(score_df$leadingEdge)
score_df$leadingEdge[[1]]
score_df$leadingEdge[[1]][1]
dim(score_df$leadingEdge)
dim(score_df$leadingEdge[[1]])
length(score_df$leadingEdge[[1]])
# Add variable containing number of genes in leading edge subset
score_df$nLeadingEdge <- lapply(score_df$leadingEdge, length)
# Size of leading edge subset distribution
hist(score_df$nLeadingEdge, breaks = 50)
head(score_df$nLeadingEdge)
# Add variable containing number of genes in leading edge subset
score_df$nLeadingEdge <- as.vector(lapply(score_df$leadingEdge, length))
head(score_df$nLeadingEdge)
class(score_df$nLeadingEdge)
# Add variable containing number of genes in leading edge subset
score_df$nLeadingEdge <- as.numeric(lapply(score_df$leadingEdge, length))
class(score_df$nLeadingEdge)
head(score_df$nLeadingEdge)
# Size of leading edge subset distribution
hist(score_df$nLeadingEdge, breaks = 50)
# Enrichment score distribution
hist(score_df$ES, breaks = 50)
# Normalized Enrichment score distribution
hist(score_df$NES, breaks = 50)
# Nominal P Value distribution
hist(score_df$pval, breaks = 50)
# FDR q value distribution
hist(score_df$padj, breaks = 50)
# Number of more extreme gene sets distribution
hist(score_df$nMoreExtreme, breaks = 50)
# Size of gene set distribution
hist(score_df$size, breaks = 50)
# Size of leading edge subset distribution
hist(score_df$nLeadingEdge, breaks = 50)
ggplot(score_df, mapping = aes(size, leading_edge, alpha = 0.05)) +
geom_point()
class(score_df$size)
ggplot(score_df, mapping = aes(size, nLeadingEdge, alpha = 0.05)) +
geom_point()
ggplot(score_df) +
geom_histogram(aes(ES, alpha = 0.05, fill = "blue")) +
geom_histogram(aes(NES, alpha = 0.05, fill = "red"))
ggplot(score_df) +
geom_histogram(aes(ES, alpha = 0.05, fill = ES)) +
geom_histogram(aes(NES, alpha = 0.05, fill = NES))
ggplot(score_df) +
geom_histogram(aes(ES, alpha = 0.05, fill = "blue"), bins = 50) +
geom_histogram(aes(NES, alpha = 0.05, fill = "red"), bins = 50)
# Enrichment score distribution
hist(score_df$ES, breaks = 50)
# Normalized Enrichment score distribution
hist(score_df$NES, breaks = 50)
# Nominal P Value distribution
hist(score_df$pval, breaks = 50)
# FDR q value distribution
hist(score_df$padj, breaks = 50)
# Number of more extreme gene sets distribution
hist(score_df$nMoreExtreme, breaks = 50)
# Size of gene set distribution
hist(score_df$size, breaks = 50)
# Size of leading edge subset distribution
hist(score_df$nLeadingEdge, breaks = 50)
