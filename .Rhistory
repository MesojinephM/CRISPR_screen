ggtitle("Gene set size vs. size of leading edge subset")
plotly::ggplotly(size_map)
ggplot
plotly::ggplotly(size_map)
# Size of gene set vs size of leading edge subset
size_map <- ggplot(score_df,
mapping = aes(size, nLeadingEdge, alpha = 0.01, label = path)) +
geom_point() +
ggtitle("Gene set size vs. size of leading edge subset")
plotly::ggplotly(size_map)
# Size of gene set vs size of leading edge subset
size_map <- ggplot(score_df,
mapping = aes(size, nLeadingEdge, alpha = 0.01, label = pathway)) +
geom_point() +
ggtitle("Gene set size vs. size of leading edge subset")
plotly::ggplotly(size_map)
library(dplyr)
cutoff <- 0.5
filter_scores <- score_df %>%
filter(padj, padj <= cutoff)
filter_scores <- score_df %>%
filter(padj <= cutoff)
# Normalized vs Observed Enrichment Score
ggplot(filter_scores) +
geom_histogram(aes(ES, alpha = 0.05, fill = "ES"),
bins = 50) +
geom_histogram(aes(NES, alpha = 0.05, fill = "NES"),
bins = 50) +
ggtitle("Distribution of ES(S) and NES(S) values") +
scale_fill_manual(name = "Variable",
values = c("ES" = "red", "NES" = "blue"),
labels = c("ES(S)", "NES(S)")) +
theme(axis.title.x = element_blank())
# Size of gene set vs size of leading edge subset
size_map <- ggplot(filter_scores,
mapping = aes(size, nLeadingEdge, alpha = 0.01, label = pathway)) +
geom_point() +
ggtitle("Gene set size vs. size of leading edge subset")
plotly::ggplotly(size_map)
# Filter data set using fdr cutoff
cutoff <- 0.1
filter_scores <- score_df %>%
filter(padj <= cutoff)
library(ggplot2)
library(dplyr)
# Filter data set using fdr cutoff
cutoff <- 0.1
filter_scores <- score_df %>%
filter(padj <= cutoff)
# Size of gene set vs size of leading edge subset
size_map <- ggplot(filter_scores,
mapping = aes(size, nLeadingEdge, alpha = 0.01, label = pathway)) +
geom_point() +
ggtitle("Gene set size vs. size of leading edge subset")
plotly::ggplotly(size_map)
# Normalized vs Observed Enrichment Score
ggplot(filter_scores) +
geom_histogram(aes(ES, alpha = 0.05, fill = "ES"),
bins = 50) +
geom_histogram(aes(NES, alpha = 0.05, fill = "NES"),
bins = 50) +
ggtitle("Distribution of ES(S) and NES(S) values") +
scale_fill_manual(name = "Variable",
values = c("ES" = "red", "NES" = "blue"),
labels = c("ES(S)", "NES(S)")) +
theme(axis.title.x = element_blank())
pathways[[BIOCARTA_BLYMPHOCYTE_PATHWAY]]
pathways[["BIOCARTA_BLYMPHOCYTE_PATHWAY"]]
# Store GSEA output and data objects as .RData file
save(score_df,
mageck_lfc_sort,
pathways,
file = "gsea_output.RData"
)
set <- "BIOCARTA_BLYMPHOCYTE_PATHWAY"
set <- "BIOCARTA_BLYMPHOCYTE_PATHWAY"
sample_plot <- fgsea::plotEnrichment(
pathway = pathways[[set]],
stats = mageck_lfc_sort,
gseaParam = 1
)
sample_plot
## Lookup by gene code
gene <- "musk"
if (length(mageck[mageck$id ==gene,]) != 0){
print(mageck[mageck$id==gene,])
} else {
print("No results found")
}
load(file = "gsea_output.RData")
# Add variable containing number of genes in leading edge subset
score_df$nLeadingEdge <- as.numeric(lapply(score_df$leadingEdge, length))
# View pathways with lowest fdr values
gsea_by_fdr <- score_df[order(score_df$padj, decreasing = FALSE),]
head(gsea_by_fdr)
# View extreme pathways by ES and NES
gsea_by_ES <- score_df[order(score_df$ES, decreasing = TRUE),]
head(gsea_by_ES$pathway)
tail(gsea_by_ES$pathway)
gsea_by_NES <- score_df[order(score_df$NES, decreasing = FALSE),]
head(gsea_by_NES$pathway)
tail(gsea_by_NES$pathway)
# View pathways with lowest fdr values
gsea_by_fdr <- score_df[order(score_df$padj, decreasing = FALSE),]
head(gsea_by_fdr)
# View extreme pathways by ES and NES
gsea_by_ES <- score_df[order(score_df$ES, decreasing = TRUE),]
head(gsea_by_ES[c(pathway, ES, NES, padj),])
gsea_by_ES <- score_df[order(score_df$ES, decreasing = TRUE),]
head(gsea_by_ES[c("pathway", "ES", "NES", "padj"),])
View(gsea_by_ES)
head(gsea_by_ES[,c("pathway", "ES", "NES", "padj")])
# View pathways with lowest fdr values
gsea_by_fdr <- score_df[order(score_df$padj, decreasing = FALSE),]
head(gsea_by_fdr)
# View extreme pathways by ES and NES
gsea_by_ES <- score_df[order(score_df$ES, decreasing = TRUE),]
head(gsea_by_ES[,c("pathway", "ES", "NES", "padj")])
tail(gsea_by_ES[,c("pathway", "ES", "NES", "padj")])
gsea_by_NES <- score_df[order(score_df$NES, decreasing = FALSE),]
head(gsea_by_NES[,c("pathway", "ES", "NES", "padj")])
tail(gsea_by_NES[,c("pathway", "ES", "NES", "padj")])
View(filter_scores)
fdr_size_plot <- ggplot(data = score_df,
mapping = aes(padj, size, alpha = 0.05)) +
geom_point() +
ggtitle("False Discovery Rate and Gene Set Size")
plotly::ggplotly(fdr_size_plot)
fdr_size_plot <- ggplot(data = score_df,
mapping = aes(padj, size, alpha = 0.05)) +
geom_density2d_filled() +
ggtitle("False Discovery Rate and Gene Set Size")
plotly::ggplotly(fdr_size_plot)
fdr_size_plot <- ggplot(data = score_df,
mapping = aes(padj, size, alpha = 0.05)) +
geom_density_2d_filled() +
ggtitle("False Discovery Rate and Gene Set Size")
plotly::ggplotly(fdr_size_plot)
fdr_size_plot <-
ggplot(data = score_df,
mapping = aes(padj, size, alpha = 0.05)) +
geom_density_2d_filled() +
ggtitle("False Discovery Rate and Gene Set Size")
fdr_size_plot
fdr_size_plot <-
ggplot(data = score_df,
mapping = aes(padj, size, alpha = 0.05)) +
geom_point(fill = "blue") +
ggtitle("False Discovery Rate and Gene Set Size")
plotly::ggplotly(fdr_size_plot)
fdr_size_plot <-
ggplot(data = score_df,
mapping = aes(padj, size, alpha = 0.05)) +
geom_point(aes(fill = "blue")) +
ggtitle("False Discovery Rate and Gene Set Size")
plotly::ggplotly(fdr_size_plot)
fdr_size_plot <-
ggplot(data = score_df,
mapping = aes(padj, size, alpha = 0.05, fill = "blue")) +
geom_point() +
ggtitle("False Discovery Rate and Gene Set Size")
plotly::ggplotly(fdr_size_plot)
fdr_size_plot <-
ggplot(data = score_df,
mapping = aes(padj, size, alpha = 0.05, color = "blue")) +
geom_point() +
ggtitle("False Discovery Rate and Gene Set Size")
plotly::ggplotly(fdr_size_plot)
fdr_size_plot <-
ggplot(
data = score_df,
mapping = aes(padj, size, alpha = 0.05)
) +
geom_point(colour = "blue") +
ggtitle("False Discovery Rate and Gene Set Size")
plotly::ggplotly(fdr_size_plot)
fdr_size_plot <-
ggplot(
data = score_df,
mapping = aes(padj, size, alpha = 0.05)
) +
geom_point(colour = "darkblue") +
ggtitle("False Discovery Rate and Gene Set Size")
fdr_size_plot <-
ggplot(
data = score_df,
mapping = aes(padj, size, alpha = 0.05)
) +
geom_point(colour = "darkblue") +
ggtitle("False Discovery Rate and Gene Set Size")
plotly::ggplotly(fdr_size_plot)
hist(filter(score_df$padj, size >= 100))
# Plot fdr and gene set size together
fdr_size_plot <-
ggplot(
data = score_df,
mapping = aes(padj, size, alpha = 0.05)
) +
geom_point(colour = "darkblue") +
ggtitle("False Discovery Rate and Gene Set Size")
plotly::ggplotly(fdr_size_plot)
# FDR distribution for gene sets over 100
large_sets < score_df %>%
filter(size >= 100)
load(dplyr)
library(dplyr)
# Plot fdr and gene set size together
fdr_size_plot <-
ggplot(
data = score_df,
mapping = aes(padj, size, alpha = 0.05)
) +
geom_point(colour = "darkblue") +
ggtitle("False Discovery Rate and Gene Set Size")
plotly::ggplotly(fdr_size_plot)
# FDR distribution for gene sets over 100
large_sets < score_df %>%
filter(size >= 100)
# Plot fdr and gene set size together
fdr_size_plot <-
ggplot(
data = score_df,
mapping = aes(padj, size, alpha = 0.05)
) +
geom_point(colour = "darkblue") +
ggtitle("False Discovery Rate and Gene Set Size")
plotly::ggplotly(fdr_size_plot)
# FDR distribution for gene sets over 100
large_sets <- score_df %>%
filter(size >= 100)
hist(large_sets$padj)
library(ggplot2)
library(dplyr)
# Filter data set using fdr cutoff
cutoff <- 1
filter_scores <- score_df %>%
filter(padj <= cutoff)
# Size of gene set vs size of leading edge subset
size_map <- ggplot(filter_scores,
mapping = aes(size, nLeadingEdge, alpha = 0.01, label = pathway)) +
geom_point() +
ggtitle("Gene set size vs. size of leading edge subset")
plotly::ggplotly(size_map)
# Normalized vs Observed Enrichment Score
ggplot(filter_scores) +
geom_histogram(aes(ES, alpha = 0.05, fill = "ES"),
bins = 50) +
geom_histogram(aes(NES, alpha = 0.05, fill = "NES"),
bins = 50) +
ggtitle("Distribution of ES(S) and NES(S) values") +
scale_fill_manual(name = element_blank(),
values = c("ES" = "red", "NES" = "blue"),
labels = c("ES(S)", "NES(S)")) +
theme(axis.title.x = element_blank())
# Plot fdr and gene set size together
fdr_size_plot <-
ggplot(
data = score_df,
mapping = aes(padj, size, alpha = 0.05)
) +
geom_point(colour = "darkblue") +
ggtitle("False Discovery Rate and Gene Set Size")
plotly::ggplotly(fdr_size_plot)
# FDR distribution for gene sets over 100
large_sets <- score_df %>%
filter(size >= 100)
hist(large_sets$padj)
cor.test(large_sets$padj, large_sets$size)
cor.test(large_sets$pval, large_sets$size)
# Plot fdr and gene set size together
fdr_size_plot <-
ggplot(
data = score_df,
mapping = aes(padj, size, alpha = 0.05)
) +
geom_point(colour = "darkblue") +
ggtitle("False Discovery Rate and Gene Set Size")
plotly::ggplotly(fdr_size_plot)
# FDR distribution for gene sets over 100
large_sets <- score_df %>%
filter(size >= 100)
hist(large_sets$padj)
cor.test(large_sets$padj, large_sets$size)
plot(large_sets$padj, large_sets$size)
plot(large_sets$size, large_sets$padj)
padj
plot(large_sets$padj, large_sets$size)
# Create enrichment plot for selected gene set/pathway
set <- "BIOCARTA_MCM_PATHWAY"
enrichment_plot <- fgsea::plotEnrichment(
pathway = pathways[[set]],
stats = mageck_lfc_sort,
gseaParam = 1
)
enrichment_plot
# Create enrichment plot for selected gene set/pathway
set <- "REACTOME_THE_CITRIC_ACID_TCA_CYCLE_AND_RESPIRATORY_ELECTRON_TRANSPORT"
enrichment_plot <- fgsea::plotEnrichment(
pathway = pathways[[set]],
stats = mageck_lfc_sort,
gseaParam = 1
)
enrichment_plot
View(gsea_by_NES)
REACTOME_THE_CITRIC_ACID_TCA_CYCLE_AND_RESPIRATORY_ELECTRON_TRANSPORT
# Create enrichment plot for selected gene set/pathway
set <- "REACTOME_RHOA_GTPASE_CYCLE"
enrichment_plot <- fgsea::plotEnrichment(
pathway = pathways[[set]],
stats = mageck_lfc_sort,
gseaParam = 1
)
enrichment_plot
# View pathways with lowest fdr values
gsea_by_fdr <- score_df[order(score_df$padj, decreasing = FALSE),]
head(gsea_by_fdr)
# View extreme pathways by ES and NES
gsea_by_ES <- score_df[order(score_df$ES, decreasing = TRUE),]
head(gsea_by_ES[,c("pathway", "ES", "NES", "padj")])
tail(gsea_by_ES[,c("pathway", "ES", "NES", "padj")])
gsea_by_NES <- score_df[order(score_df$NES, decreasing = FALSE),]
head(gsea_by_NES[,c("pathway", "ES", "NES", "padj")])
tail(gsea_by_NES[,c("pathway", "ES", "NES", "padj")])
# Look-up by gene code
gene <- "musk"
if (length(mageck[mageck$id ==gene,]) != 0){
print(mageck[mageck$id==gene,])
} else {
print("No results found")
}
# Plot fdr and gene set size together
fdr_size_plot <-
ggplot(
data = score_df,
mapping = aes(padj, size, alpha = 0.05)
) +
geom_point(colour = "darkblue") +
ggtitle("False Discovery Rate and Gene Set Size")
plotly::ggplotly(fdr_size_plot)
# FDR distribution for gene sets over 100
large_sets <- score_df %>%
filter(size >= 100)
hist(large_sets$padj)
plot(large_sets$padj, large_sets$size)
cor.test(large_sets$padj, large_sets$size)
plot(score_df$pval, score_df$size)
knitr::opts_chunk$set(echo = TRUE)
enrichment_plot2 <- fgsea::plotEnrichment(
pathway = pathways[["BIOCARTA_IFNA_PATHWAY"]],
stats = mageck_lfc_sort,
gseaParam = 1
)
enrichment_plot2
enrichment_plot2
enrichment_plot2 <- fgsea::plotEnrichment(
pathway = pathways[["REACTOME_CD28_DEPENDENT_PI3K_AKT_SIGNALING"]],
stats = mageck_lfc_sort,
gseaParam = 1
)
enrichment_plot2
# Create enrichment plot for selected gene set/pathway
set <- "REACTOME_RHOA_GTPASE_CYCLE"
enrichment_plot <- fgsea::plotEnrichment(
pathway = pathways[[set]],
stats = mageck_lfc_sort,
gseaParam = 1
)
enrichment_plot
enrichment_plot2 <- fgsea::plotEnrichment(
pathway = pathways[["REACTOME_CD28_DEPENDENT_PI3K_AKT_SIGNALING"]],
stats = mageck_lfc_sort,
gseaParam = 1
)
enrichment_plot2
enrichment_plot3 <- fgsea::plotEnrichment(
pathway = pathways[["REACTOME_HOMOLOGY_DIRECTED_REPAIR"]],
stats = mageck_lfc_sort,
gseaParam = 1
)
enrichment_plot3
enrichment_plot4 <- fgsea::plotEnrichment(
pathway = pathways[["REACTOME_G0_AND_EARLY_G1"]],
stats = mageck_lfc_sort,
gseaParam = 1
)
enrichment_plot4
score_df
score_df[pathway == "REACTOME_G0_AND_EARLY_G1",]
score_df[pathway == "REACTOME_HOMOLOGY_DIRECTED_REPAIR",]
# Create enrichment plot for selected gene set/pathway
set <- "REACTOME_RHOA_GTPASE_CYCLE"
enrichment_plot <- fgsea::plotEnrichment(
pathway = pathways[[set]],
stats = mageck_lfc_sort,
gseaParam = 1
)
enrichment_plot
enrichment_plot2 <- fgsea::plotEnrichment(
pathway = pathways[["REACTOME_CD28_DEPENDENT_PI3K_AKT_SIGNALING"]],
stats = mageck_lfc_sort,
gseaParam = 1
)
enrichment_plot2
enrichment_plot3 <- fgsea::plotEnrichment(
pathway = pathways[["REACTOME_HOMOLOGY_DIRECTED_REPAIR"]],
stats = mageck_lfc_sort,
gseaParam = 1
)
enrichment_plot3
enrichment_plot4 <- fgsea::plotEnrichment(
pathway = pathways[["REACTOME_G0_AND_EARLY_G1"]],
stats = mageck_lfc_sort,
gseaParam = 1
)
enrichment_plot4
# Create enrichment plot for selected gene set/pathway
set <- "REACTOME_RHOA_GTPASE_CYCLE"
enrichment_plot <- fgsea::plotEnrichment(
pathway = pathways[[set]],
stats = mageck_lfc_sort,
gseaParam = 1
)
enrichment_plot
enrichment_plot2 <- fgsea::plotEnrichment(
pathway = pathways[["WP_ENDOCHONDRAL_OSSIFICATION"]],
stats = mageck_lfc_sort,
gseaParam = 1
)
enrichment_plot2
enrichment_plot3 <- fgsea::plotEnrichment(
pathway = pathways[["REACTOME_HOMOLOGY_DIRECTED_REPAIR"]],
stats = mageck_lfc_sort,
gseaParam = 1
)
enrichment_plot3
enrichment_plot4 <- fgsea::plotEnrichment(
pathway = pathways[["REACTOME_G0_AND_EARLY_G1"]],
stats = mageck_lfc_sort,
gseaParam = 1
)
enrichment_plot4
cutoff <- .05
filter_scores <- score_df %>%
filter(padj <= cutoff)
library(dplyr)
cutoff <- .05
filter_scores <- score_df %>%
filter(padj <= cutoff)
cutoff <- .02
filter_scores <- score_df %>%
filter(padj <= cutoff)
cutoff <- .05
filter_scores <- score_df %>%
filter(padj <= cutoff)
summary(filter_scores)
summary(filter_scores$NES)
summary(filter_scores[,c(2:7,9)])
library(dplyr)
knitr::opts_chunk$set(echo = TRUE)
load(file = "gsea_output.RData")
# Add variable containing number of genes in leading edge subset
score_df$nLeadingEdge <- as.numeric(lapply(score_df$leadingEdge, length))
# order filter scores by
noteable_sets <- score_df %>%
filter(padj <= 0.05) %>%
order(NES, decreasing = TRUE)
# order filter scores by
noteable_sets <- score_df %>%
filter(padj <= 0.05) %>%
arrange(desc(NES))
View(noteable_sets)
print(noteable_sets)
# order filter scores by
noteable_sets <- score_df %>%
filter(padj <= 0.05) %>%
filter(NES <0) %>%
arrange(desc(NES))
print(noteable_sets)
# order filter scores by
noteable_sets <- score_df %>%
filter(padj <= 0.05) %>%
#  filter(NES <0) %>%
arrange(desc(NES))
print(noteable_sets)
# order filter scores by
noteable_sets <- score_df %>%
filter(padj <= 0.05) %>%
#  filter(NES <0) %>%
arrange(desc(NES)) %>%
select(c(pathway, padj, NES))
print(noteable_sets)
score_df[pathway == "REACTOME_G0_AND_EARLY_G1",]
shiny::runApp('GSEA_table')
# Load gsea output data
load(file = "gsea_output.RData")
runApp('GSEA_table')
# Add variable containing number of genes in leading edge subset
score_df$nLeadingEdge <- as.numeric(lapply(score_df$leadingEdge, length))
library(shiny)
runApp('GSEA_table')
wd()
getwd()
runApp('GSEA_table')
?load
runApp('GSEA_table')
runApp('GSEA_table')
runApp('GSEA_table')
??renderDT
runApp('GSEA_table')
# Create table of GSEA output data
DT::datatable(score_df)
runApp('GSEA_table')
