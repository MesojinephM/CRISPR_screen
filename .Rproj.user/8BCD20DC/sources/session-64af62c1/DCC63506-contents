
library(shiny)
library(ggplot2)


# Define server logic required to draw a histogram
function(input, output, session) {

    # Distribution of positive selection fdr
    output$pos_fdr <- renderPlot({
        posfdr_plot <- ggplot(mageck, aes(x = pos.fdr)) +
            geom_histogram(bins = 500) +
            xlab("fdr") 
            #ggtitle("Distribution of positive selection fdr values")  
        posfdr_plot
    })
    
    
    # Distribution of negative selection fdr
    output$neg_fdr <- renderPlot({
        negfdr_plot <- ggplot(mageck, aes(x = neg.fdr)) +
            geom_histogram(bins = 500) +
            xlab("fdr") 
            #ggtitle("Distribution of negative selection fdr values")    
        negfdr_plot
    })
    
    output$scores <- renderPlot({
        # Compare positive score and negative score
        score_plot <-ggplot(mageck, aes(x = pos.score, 
                                        y = neg.score, 
                                        alpha = 0.01)) +
                            geom_density_2d_filled() 
                            #ggtitle("Comparison of positive score and negative score")
        score_plot
    })
    
    output$lfc_dist <- renderPlot({
        # Distribution of lfc (positive and negative values the same)
        lfc_dist <- ggplot(mageck, aes(x = lfc)) +
            geom_histogram(bins = 500) +
            xlab("lfc") +
            ggtitle("Distribution of log fold change for all genes")  
        lfc_dist
    })
    
    output$lfc_norm <- renderPlot({
        # Check normality of variable
        qqnorm(mageck$lfc, main = "Normality of log fold change")
        qqline(mageck$lfc)
    })
    
    # output$sgrna <- renderPlot({
    #     ### number of sgRNA's
    #     sgrna <- ggplot(mageck, aes(num)) +
    #                 geom_bar(aes(fill = num)) +
    #                 geom_text(stat = 'count', 
    #                           aes(label = after_stat(count)), 
    #                 vjust = -0.5) 
    #     sgrna
    # })
    
    ### goodsgrna    
    output$good_pos <- renderPlot({
        # positive selection
        ggplot(mageck, aes(pos.goodsgrna)) +
            geom_bar(aes(fill = pos.goodsgrna)) +
            geom_text(stat = 'count', 
                      aes(label = after_stat(count)), 
                      vjust = -0.5) 
            #ggtitle("Distribution of negative selection `goodsgrna`")
    })
    
    output$good_neg <- renderPlot({
        # negative selection
        ggplot(mageck, aes(neg.goodsgrna)) +
            geom_bar(aes(fill = neg.goodsgrna)) +
            geom_text(stat = 'count', 
                      aes(label = after_stat(count)), 
                      vjust = -0.5) 
            #ggtitle("Distribution of negative selection `goodsgrna`")
    })
    
    # Correlation plot
    output$corr <- renderPlot({
        # Create correlation plot
        cor.crispr <- cor(mageck[,-c(1,6,11)])
        corrplot::corrplot(cor.crispr,
                 method = "color")
    })
    
    # Display table of MAGeCK output
    output$mageckTable <- DT::renderDataTable(mageck, server = TRUE)
    
    # Display table of GSEA output
    output$distTable <- DT::renderDataTable(score_df[,c(1:5,7)], server = TRUE)
    
    # Display table for leading edge subset
    output$leadingTable <- DT::renderDataTable(score_df[,c(1,5,7,9,8)], server = TRUE)
    
    # Size of gene set vs size of leading edge subset
    output$le_gene <- plotly::renderPlotly({
        cutoff <- input$padj
        size_map <- ggplot(score_df[padj <= cutoff], 
                           mapping = aes(size, nLeadingEdge, alpha = 0.01, label = pathway)) +
            geom_point() +
            ggtitle("Gene set size vs. size of leading edge subset")
        
        plotly::ggplotly(size_map)
    })
    
    output$es_dist <- renderPlot({
        # Normalized vs Observed Enrichment Score
        cutoff <- input$padj
        ggplot(score_df[padj <= cutoff]) +
            geom_histogram(aes(ES, alpha = 0.05, fill = "ES"), 
                           bins = 50) +
            geom_histogram(aes(NES, alpha = 0.05, fill = "NES"), 
                           bins = 50) +
            #ggtitle("Distribution of ES(S) and NES(S) values") +
            scale_fill_manual(name = element_blank(), 
                              values = c("ES" = "red", "NES" = "blue"),
                              labels = c("ES(S)", "NES(S)")) +
            theme(axis.title.x = element_blank())
        
    })
    
    output$fdr_size <- plotly::renderPlotly({
        # Plot fdr and gene set size together
        fdr_size_plot <- 
            ggplot(
                data = score_df, 
                mapping = aes(padj, size, alpha = 0.05)
            ) +
            geom_point(colour = "darkblue") 
        #ggtitle("False Discovery Rate and Gene Set Size")
        
        plotly::ggplotly(fdr_size_plot)
    })
    
    # Server function for selectize input, may not be needed now
    shinyServer(function(input, output, session) {
        data <- score_df$pathway
        updateSelectizeInput(session, "set", choices = data, server = TRUE)
    })
    
    # Create enrichment plot of selected gene set
    output$enrichPlot <- renderPlot({
        
        set <- input$set
        
        e_plot <- 
            fgsea::plotEnrichment(
                pathway = pathways[[set]], 
                stats = mageck_lfc_sort,                    
                gseaParam = 1
            )
        e_plot$layers[[5]]$aes_params$colour <- "blue"
        e_plot
    })
    
    # Print data for selected gene set
    output$enrichData <- renderTable({
        
        set <- input$set
        
        score_df[pathway == set, c(3:5, 7)]
        
    }, 
    bordered = TRUE,
    align = "c",
    )
    

}
